#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright 2010 Andrew De Quincey -  adq@lidskialf.net
# This file is part of rEdBus.
#
#  rEdBus is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  rEdBus is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with rEdBus.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os
import mechanize
import BeautifulSoup
import datetime
import psycopg2
import time
import re

debug = True

serviceRe = re.compile('range[0-9]+\"\s*>\s*([0-9A-Z]+)\s+')

browser = mechanize.Browser()
browser.set_handle_robots(False)
browser.add_headers = []

# Connect to database
db = psycopg2.connect("host=beyond dbname=redbus user=redbus password=password")
curs = db.cursor()
mapcurs = db.cursor()

# Use only the latest data
curs.execute("SELECT max(created_date) FROM services")
latestdate = curs.fetchone()[0]

# Zap any old service maps
curs.execute("UPDATE stop_override SET service_diff = NULL");

# Get the list of services from the database
servicesByIdx = []
servicesById = {}
servicesByName = {}
curs.execute("SELECT service_id, service_name FROM services WHERE created_date = %s ORDER BY service_name", (latestdate, ))
for row in curs:
    dbserviceid = row[0]
    service_name  = row[1]
    service = { 'DbServiceId' : dbserviceid, 
                'ServiceName' : service_name,
                'ServiceIdx'  : len(servicesById) 
              };             
    servicesById[dbserviceid] = service                                                 
    servicesByName[service_name] = service
    servicesByIdx.append(service)

# Get the list of stops from the database
if debug:
    print "Loading stop data from database..."
stopsByStopCode = {}
curs.execute("SELECT stop_id, stop_code, stop_name FROM stops WHERE created_date = %s order by stop_code desc", (latestdate, ))
for row in curs:
    # stop data
    dbstopid = row[0]
    code = row[1]
    name = row[2]

    stopmap = 0
    mapcurs.execute("SELECT service_id FROM stops_services WHERE created_date = %s AND stop_id = %s", (latestdate, dbstopid))
    for maprow in mapcurs:
        service = servicesById[maprow[0]]
        stopmap |= 1 << service['ServiceIdx']

    stop = { 'DbStopId': dbstopid,
             'StopCode': code,
             'Name':     name,
             'StopMap':  stopmap
        };                                          
    stopsByStopCode[code] = stop

# Now, lookup the services for each stop
if debug:
    print "Starting to check stops..."
count = 0
for stop in stopsByStopCode.itervalues():
    if debug:
        print "Checking stop %s (%i/%i)" % (stop['StopCode'], count, len(stopsByStopCode))
    count += 1

    xmlString = browser.open('http://www.mybustracker.co.uk/getBusStopDepartures.php?' +
                             'refreshCount=0' +
                             '&clientType=b' +
                             '&busStopDay=0' +
                             '&busStopService=0' +
                             '&numberOfPassage=1' +
                             '&busStopTime=00:00' +
                             '&busStopDestination=0' +
                             '&busStopCode=%s' % stop['StopCode']).read()

    newstopmap = 0
    for serviceName in serviceRe.findall(xmlString):
        if serviceName not in servicesByName:
            print >>sys.stderr, "Stop %s has unknown service %s" % (stop['StopCode'], serviceName)

        service = servicesByName[serviceName]
        newstopmap |= 1 << service['ServiceIdx']
        
    oldstopmap = stop['StopMap']
    if newstopmap != oldstopmap:
        diffmask = oldstopmap ^ newstopmap

        diff = []
        for i in xrange(0, len(servicesByIdx)):
            if diffmask & (1 << i):
                difftype = "-"
                if newstopmap & (1 << i):
                    difftype = "+"
                diff.append("%s%s" % (difftype, servicesByIdx[i]['ServiceName']))
                
        # Add it to the database and report on it
        curs.execute("UPDATE stop_override SET service_diff = %s WHERE stop_code=%s", (" ".join(diff), stop['StopCode']))
        if curs.rowcount == 0:
            curs.execute("INSERT INTO stop_override (stop_code, service_diff) VALUES (%s, %s)", (stop['StopCode'], " ".join(diff)))
        db.commit()
        if debug:
            print >>sys.stderr, "Stop %s has differing services: %s" % (stop['StopCode'], ",".join(diff))
            
            
    if (count % 250) == 0:
        time.sleep(30)
    else:
        time.sleep(1)

# DONE
curs.close()
db.close()
