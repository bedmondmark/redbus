#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright 2010, 2011 Andrew De Quincey -  adq@lidskialf.net
# This file is part of rEdBus.
#
#  rEdBus is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  rEdBus is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with rEdBus.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os
import urllib.request
import urllib.parse
import datetime
import psycopg2
import time
import re
import lxml.html
from lxml import etree
import xml.sax
from BusServiceSaxDocumentHandler import BusServiceSaxDocumentHandler
import json

if len(sys.argv) != 2:
    print("Syntax: getlrtdata <nowdate>", file=sys.stderr)
    sys.exit(1)
nowdate = sys.argv[1]

# grab the list of all bus services
services = {}
resp = urllib.request.urlopen("http://www.mybustracker.co.uk/")
tree = lxml.html.fromstring(resp.read().decode('utf-8'))
for option in tree.xpath("//select[@name='serviceRef']/option"):
    serviceCode = option.attrib["value"].strip();
    serviceName = option.text.split('-', 1)[0].strip();
    serviceRoute = option.text.split('-', 1)[1].strip();
    services[serviceName] = { 'ServiceName': serviceName,
                              'ServiceRef': serviceCode,
                              'ServiceRoute': serviceRoute,
                              'StopCount': 0 }

# First of all, get service details from the new website
stops = {}
for service in services:
    params = urllib.parse.urlencode({ 'googleMapMode': '2',
                                      'googleServiceRef': services[service]['ServiceRef'],
                                      })

    resp = urllib.request.urlopen("http://www.mybustracker.co.uk/update.php?widget=BTMap&widgetId=main&updateId=updateMap", params.encode('utf-8'))
    updateXml = etree.fromstring(resp.read())
    updateJson = json.loads(updateXml.xpath('/ajaxUpdate/updateElement')[0].text)

#    if len(updateJson['deviations']):
#        print(updateJson['deviations'])

    for m in updateJson['markers']:
        if 'content' not in m:
            continue

        stopName = m['content']['name']
        stopCode = m['content']['stopId']
        x = m['x']
        y = m['y']
        servicesAtThisStop = [name for (_code, name) in m['content']['lignes']]

        # FIXME: do something with the img

        for tmpservice in servicesAtThisStop:
            if not tmpservice in services:
                print >>sys.stderr, "Warning: Stop %s has services which do not exist (%s)" % (stopCode, tmpservice)
            else:
                services[tmpservice]['StopCount'] += 1

        if not stopCode in stops:
            stops[stopCode] = { 'StopCode': stopCode,
                                'StopName': stopName,
                                'X':        x,
                                'Y':        y,
                                'Services': servicesAtThisStop }

# Connect to database
db = psycopg2.connect("host=beyond dbname=redbus user=redbus password=password")
dbcur = db.cursor()

# Add services to the database
for service in services.values():
    dbcur.execute("INSERT INTO services (service_name, service_route, service_provider, created_date) VALUES (%s, %s, %s, %s); SELECT last_value FROM services_service_id_seq",
                  (service['ServiceName'], service['ServiceRoute'], 'LRT', nowdate))
    service['DbServiceId'] = dbcur.fetchone()[0]
db.commit()

# Add stops to the DB
for stop in stops.values():
    dbcur.execute("INSERT INTO stops (stop_code, stop_name, x, y, facing, stop_type, source, created_date) " +
                  "SELECT %(stop_code)s, %(stop_name)s, %(x)s, %(y)s, %(facing)s, %(stop_type)s, %(source)s, %(date)s ",
                  { 'stop_code': stop['StopCode'],
                    'stop_name': stop['StopName'],
                    'x': stop['X'],
                    'y': stop['Y'],
                    'facing': '',
                    'stop_type': 'BCT',
                    'source': 'LRT',
                    'date': nowdate });
db.commit()

# Populate the link table between services and stops
for stop in stops.values():
    for serviceName in stop['Services']:
        if serviceName in services:
            dbcur.execute("INSERT INTO stops_services (stop_id, service_id, created_date) "+
                          "SELECT stops.stop_id, services.service_id, %(date)s " +
                          "FROM stops " +
                          "CROSS JOIN services " +
                          "WHERE stops.stop_code=%(stopcode)s AND stops.created_date = %(date)s " +
                          "AND services.service_provider = 'LRT' AND services.service_name = %(service)s AND services.created_date = %(date)s",
                          { 'date': nowdate,
                            'stopcode': stop['StopCode'],
                            'service': serviceName})

            if dbcur.statusmessage != 'INSERT 0 1':
                print("Failed to insert entry for stop %s service %s" % (stop['StopCode'], serviceName))

db.commit()

# DONE
dbcur.close()
db.close()
