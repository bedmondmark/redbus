#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright 2010 Andrew De Quincey -  adq@lidskialf.net
# This file is part of rEdBus.
#
#  rEdBus is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  rEdBus is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with rEdBus.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os
import mechanize
import BeautifulSoup
import datetime
import psycopg2
import time
import re

debug = True

serviceRe = re.compile('range[0-9]+\"\s*>\s*([0-9A-Z]+)\s+')

browser = mechanize.Browser()
browser.set_handle_robots(False)
browser.add_headers = []

# Connect to database
db = psycopg2.connect("host=beyond dbname=redbus user=redbus password=password")
curs = db.cursor()
mapcurs = db.cursor()

# Get the list of stop service overrides from the database
if debug:
    print "Loading stop data from database..."
overrides = [] 
curs.execute("SELECT stop_override_id, stop_code, service_diff FROM stop_override WHERE service_diff IS NOT NULL")
for row in curs:
    # stop data
    stopoverrideid = row[0]
    code = row[1]
    diff = row[2]

    override = { 'StopOverrideId': stopoverrideid,
                 'StopCode': code,
                 'Diff':     diff
               };
    overrides.append(override)

# Now, lookup the services for each stop in the overrides
if debug:
    print "Starting to check stops..."
count = 0
for override in overrides:
    if debug:
        print "Checking stop %s (%i/%i)" % (override['StopCode'], count + 1, len(overrides))
    count += 1

    xmlString = browser.open('http://www.mybustracker.co.uk/getBusStopDepartures.php?' +
                             'refreshCount=0' +
                             '&clientType=b' +
                             '&busStopDay=0' +
                             '&busStopService=0' +
                             '&numberOfPassage=1' +
                             '&busStopTime=' +
                             '&busStopDestination=0' +
                             '&busStopCode=%s' % override['StopCode']).read()
                                 
    stopservices = {}
    for service in serviceRe.findall(xmlString):
        stopservices[service] = True
                       
    newoverrides = []
    for serviceoverride in override['Diff'].split(' '):
        if not ((serviceoverride[0] == '-') and (stopservices.has_key(serviceoverride[1:]))):
            newoverrides.append(serviceoverride)
    newoverrides = " ".join(newoverrides)
    
    if override['Diff'] != newoverrides:
        if len(newoverrides) > 0:
            curs.execute("UPDATE stop_override SET service_diff = %s WHERE stop_code=%s", (newoverrides, override['StopCode']))
        else:
            curs.execute("UPDATE stop_override SET service_diff = NULL WHERE stop_code=%s", (override['StopCode'], ))
        db.commit()
            
    if (count % 250) == 0:
        time.sleep(30)
    else:
        time.sleep(1)

# DONE
curs.execute("DELETE FROM stop_override WHERE stop_name IS NULL AND x IS NULL and y IS NULL and service_diff IS NULL");
db.commit()
curs.close()
db.close()
